package com.leetcode.dp;

/**
 * 198. 打家劫舍
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 *
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 *
 * 示例 1:
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 *
 * 示例 2:
 * 输入: [2,7,9,3,1]
 * 输出: 12
 * 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 */
public class L198HouseRob {

    /**
     * 初始化思路： 假设h[i]为每个房间的金额，f(n)为最高金额
     *  f(n) = max(h(0) + f(n|去掉0, 1), h(1) + f(n|去掉0,1,2)
     *  f(n) = max(f(n-1), f(n-2) + h(n))
     * @param nums
     * @return
     */
    public int rob(int[] nums) {
        assert nums != null;

        // 前两个元素为0， 作为结果的占位符, fn[-2], fn[-1] = 0
        int[] fn = new int[nums.length + 2];
        for (int i = 0; i < nums.length; i++) {
            int idx = i + 2;
            fn[idx] = Math.max(fn[idx-1], fn[idx-2] + nums[i]);
        }

        return fn[nums.length + 1];
    }
}
